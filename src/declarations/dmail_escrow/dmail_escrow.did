type TransferResult = 
 variant {
   Err: TransferError;
   Ok;
 };
type TransferError = 
 variant {
   BadFee: record {expected_fee: Tokens;};
   InsufficientFunds: record {balance: Tokens;};
   TxCreatedInFuture;
   TxDuplicate: record {duplicate_of: BlockIndex;};
   TxTooOld: record {allowed_window_nanos: nat64;};
 };
type Tokens = record {e8s: nat64;};
type Dmail = 
 service {
   getAddressBalance: (Address) -> (opt Amount);
   getP: () -> (principal);
   myAccountId: () -> (AccountIdentifier);
   register: (Address) -> (text);
   transerEachAddress: (blob, Address) -> (TransferResult);
   update: (Address, nat64) -> (text);
 };
type BlockIndex = nat64;
type Amount = record {icp: nat64;};
type Address = text;
type AccountIdentifier = blob;
service : (text) -> Dmail
